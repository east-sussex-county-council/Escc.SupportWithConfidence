@model Escc.SupportWithConfidence.Admin.Models.CategoryViewModel
@using ClientDependency.Core.Mvc
@using Escc.ClientDependencyFramework
@using Escc.Web
@using System.Globalization
@{
    Model.Metadata.Title = "Add a category";
    Html.RequiresCss(CssFileAlias.Resolve("FormsSmall"));
    Html.RequiresCss(CssFileAlias.Resolve("FormsMedium"), MediaQueryAlias.Resolve("Medium"));
    Html.RequiresCss(CssFileAlias.Resolve("FormsLarge"), MediaQueryAlias.Resolve("Large"));
    Html.RequiresCss("~/css/support.css");
    Html.RequiresJs("~/scripts/tinymce/tinymce.min.js");
    Html.RequiresJs("~/scripts/edit-category.js");

    // For TinyMCE
    new ContentSecurityPolicyHeaders(Response.Headers).AppendPolicy("style-src 'unsafe-inline'").UpdateHeaders();
}
<div class="full-page">
    <div class="content text-content">
        <h1>@Model.Metadata.Title</h1>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="form service-form">
                <div class="formBox">
                    <div class="formPart">
                        @Html.LabelFor(cat => Model.Code)
                        @Html.TextBoxFor(cat => Model.Code)
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "warning" })
                    </div>
                    <div class="formPart">
                        @Html.LabelFor(cat => Model.Description)
                        @Html.TextBoxFor(cat => Model.Description)
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "warning" })
                    </div>
                    <div class="formPart">
                        @Html.LabelFor(cat => Model.Summary)
                        @Html.TextAreaFor(cat => Model.Summary)
                        @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "warning" })
                    </div>
                    <div class="formPart">
                        @Html.LabelFor(cat => Model.ParentId)
                        @Html.DropDownListFor(cat => Model.ParentId, Model.PossibleParentCategories.Select(x => new SelectListItem { Value = x.CategoryId.ToString(CultureInfo.InvariantCulture), Text = x.Description }), string.Empty)
                        @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "warning" })
                    </div>
                    <div class="formPart">
                        @Html.LabelFor(cat => Model.Sequence)
                        <p class="form-help">0 is the default. Use negative numbers to sort first, and positive to sort last.</p>
                        @Html.TextBoxFor(cat => Model.Sequence, new { @class = "sort", type = "number" })
                        @Html.ValidationMessageFor(model => model.Sequence, "", new { @class = "warning" })
                    </div>
                </div>
                
                <div class="formButtons">
                    <input type="submit" value="Save" />
                </div>
            </div>
        }

        <p>
            @Html.ActionLink("Back to list", "Index")
        </p>
    </div>
</div>